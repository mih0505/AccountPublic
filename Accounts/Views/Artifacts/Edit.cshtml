@model Accounts.Models.Artifact

@{
    ViewBag.Title = "Редактировать достижение";
}

<h2>@ViewBag.Title</h2>


@using (Html.BeginForm("Edit", "Artifacts", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @if (!User.IsInRole("Students"))
        {
            @Html.HiddenFor(model => model.UserId)
            @Html.HiddenFor(model => model.DateAdd)
        }
        <div class="form-group">
            <h4>Категория:  @ViewBag.CurrentCatigory.Name</h4>
            <div class="col-md-10">
                @Html.HiddenFor(model => model.CatigoryId, new { Value = @ViewBag.CurrentCatigory.Id })
                @Html.ValidationMessageFor(model => model.CatigoryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateBegin, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 date" id='datetimepicker1'>
                @Html.EditorFor(model => model.DateBegin, new { htmlAttributes = new { @class = "form-control" } })                
                @Html.ValidationMessageFor(model => model.DateBegin, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AdditionalInformation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.AdditionalInformation, new { htmlAttributes = new { @class = "form-control", @rows = 8 } })
                @Html.ValidationMessageFor(model => model.AdditionalInformation, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Ссылка на внешний ресурс, подтверждающий достижение", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Link, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Link, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Файл, подтверждающий достижение", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.Path, new { htmlAttributes = new { @class = "form-control" } })
                @Html.HiddenFor(model => model.NameFile, new { htmlAttributes = new { @class = "form-control", type = "file" } })
                @Html.ValidationMessageFor(model => model.NameFile, "", new { @class = "text-danger" })
                @if (Model.Path != null)
                {
                    string shortPath = Model.Path.Substring(Model.Path.LastIndexOf("Portfolio") - 1);
                    if (shortPath.Substring(shortPath.LastIndexOf('.')) == ".pdf")
                    {
                        <a href="@Url.Action("GetFile", new { path = Model.Path, name = Model.NameFile })" class="not-filled recent">
                            <img src="~/Images/pdf-icon.png" style="width:25px; height:25px;" />
                            @Model.NameFile
                        </a>
                    }
                    else if (shortPath.Substring(shortPath.LastIndexOf('.')) == ".zip")
                    {
                        <a href="@Url.Action("GetFile", new { path = Model.Path, name = Model.NameFile })" class="not-filled recent">
                            <img src="~/Images/zip-files.png" style="width:25px; height:25px;" />
                            @Model.NameFile
                        </a>
                    }
                    else
                    {
                        <a href="@Url.Action("GetFile", new { path = Model.Path, name = Model.NameFile })" class="not-filled recent">
                            <img src="@shortPath" style="width:300px; height:auto;" />
                        </a>
                    }
                }

            </div>
            <div class="col-md-10">
                <input type="file" id="File" name="File" />
                <p>Размер файла не должен превышать 30 МБ. Доступны следующие форматы файлов: *.jpeg, *.jpg, *.pdf, *.zip, *.png"</p>
                <div id="fileinfo" style="color:red;"></div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Сохранить" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @if (User.IsInRole("Students"))
    {
        @Html.ActionLink("Вернуться к списку достижений", "Index", new { id = @ViewBag.CurrentCatigory.SectionId });
    }
    else
    {
        @Html.ActionLink("Вернуться к списку достижений", "GetArtifacts", "Tutors", new { sectionId = @ViewBag.CurrentCatigory.SectionId, userId = Model.UserId }, null);
    }
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        function updateSize() {
            var file = document.getElementById("File").files[0],
                ext = "не определилось",
                parts = file.name.split('.');
            if (parts.length > 1) ext = parts.pop();
            var messageError = "";
            if (file.size > 30 * 1024 * 1024) messageError = "Превышен максимальный размер файла!<br />";
            if (ext.toLowerCase() != "jpg" && ext.toLowerCase() != "jpeg" && ext.toLowerCase() != "jpg" && ext.toLowerCase() != "pdf"
                && ext.toLowerCase() != "zip" && ext.toLowerCase() != "png" && ext.toLowerCase() != "gif")
                messageError += "Допускаются только файлы с расширениями: jpeg, jpg, pdf, zip, png, gif"
            document.getElementById("fileinfo").innerHTML = [
                messageError
            ].join("<br>");
        }
        document.getElementById('File').addEventListener('change', updateSize);
    </script>
}



