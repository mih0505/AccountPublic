@model Accounts.Models.Journal

@{
    ViewBag.Title = "Создание журнала";
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.HiddenFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })
            @if (!User.IsInRole("Administrators"))
            {
                @Html.HiddenFor(model => model.FacultyId, new { htmlAttributes = new { @class = "form-control" } })
            }
            else
            {
                @Html.LabelFor(model => model.FacultyId, "Факультет", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("FacultyId", null, htmlAttributes: new { @class = "form-control", @id = "faculty" })
                    @Html.ValidationMessageFor(model => model.FacultyId, "", new { @class = "text-danger" })
                </div>
            }
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.GroupId, "Группа", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("GroupId", null, "--Выбрать--", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.GroupId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Discipline, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Discipline, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Discipline, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Semester, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Semester, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Semester, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (Model.TeacherNameId == null)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.TeacherNameId, "Преподаватель", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("TeacherNameId", null, "--Выбрать--", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TeacherNameId, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.TeacherNameId);
        }
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Создать" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Назад", "Index")
</div>


@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            $("#faculty").change(function () {
                $("#GroupId").empty();
              $.ajax({
                  type: 'POST',
                  url: '@Url.Action("GetGroups")',
                  dataType: 'json',
                  data: { id: $("#faculty").val() },
                  success: function (groups) {
                      $.each(groups, function (i, group) {
                          $("#GroupId").append('<option value="' + group.Value + '">' + group.Text + '</option>');
                      });
                  },
                  error: function (ex) {
                      alert('Не удалось получить список групп.' + ex);
                  }
              });
              return false;
          })
        });

        $(document).ready(function () {
            $("#faculty").change(function () {
                $("#TeacherNameId").empty();
              $.ajax({
                  type: 'POST',
                  url: '@Url.Action("GetTeachers")',
                  dataType: 'json',
                  data: { id: $("#faculty").val() },
                  success: function (teachers) {
                      $.each(teachers, function (i, teacher) {
                          $("#TeacherNameId").append('<option value="' + teacher.Value + '">' + teacher.Text + '</option>');
                      });
                  },
                  error: function (ex) {
                      alert('Не удалось получить список преподавателей.' + ex);
                  }
              });
              return false;
          })
        });
    </script>
}